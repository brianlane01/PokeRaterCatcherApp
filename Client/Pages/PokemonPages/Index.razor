@page "/Pokemon"
@inject HttpClient httpClient
@attribute [Authorize]
@using PokemonCatcherGame.Shared.Models.PokeApiPokemonModels
@using PokemonCatcherGame.Shared.Models.PokemonModels
@using System.Text.Json.Serialization
@using Newtonsoft.Json
<PageTitle>Index</PageTitle>

<div class = "row">
    <div class ="col mx-auto justify-content-between">
        <form class ="form-inline" @onsubmit ="GetPokemonAsync">
            <div class = "form-group mb-2">
                <input type = "text" @bind-value="@searchText" class="form-control" placeholder="Search Pokemon">
            </div>
            <button type="submit" class="btn btn-primary mb-2 ml-auto">Find</button>
        </form>
    </div>
</div>

@if(IsLoading)
{
    <h1 class = "text-center">Loading....</h1>
}
else
{
    if(Pokemon == null)
    {
        <h1 class ="text-center"> No Pokemon to display</h1>
    }
    else
    {
        <div class = "row">
            <div class = "col mx-auto justify-content-between">
                <div class = "card">
                    <img src="https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/@(Pokemon.Id).png" class = "card-img-top img-fluid" alt="@Pokemon.Name">
                    <div class = "card-body">
                        <h3 class ="card-title">@Pokemon.Name.ToUpper()</h3>
                        <h6>Id: @Pokemon.Id</h6>
                        <h6>Height: @Pokemon.Height</h6>
                        <h6>Weight: @Pokemon.Weight</h6>
                        <h6>XP: @Pokemon.BaseExperience</h6>
                    </div>
                </div>
                <form class = "form-inline">
                    <button type = "button" class = "btn btn-primary mb-2" @onclick="@(() => ChangePokemonAsync(-1))">Previous</button>
                    <button type = "button" class = "btn btn-primary mb-2" @onclick="@(() => ChangePokemonAsync(1))">Next</button>
                </form>
                <EditForm Model=""
            </div>
        </div>

        <br />  
        <a href ="/Pokemon/Create">Create A Pokemon</a>
    }
}

@code {
    public PokeApiPokemonDetail Pokemon {get; set;}
    private PokemonCreate Pokemon = new PokemonCreate();
    public string searchText;
    public bool IsLoading {get; set;}
    private string? errorMessage;

    protected async Task GetPokemonAsync()
    {
        IsLoading = true;
        Pokemon = await GetPokemon(searchText);
        IsLoading = false;

        var pokemonDTO = new PokemonCreate
        {
            PokedexNumber = Pokemon.Id,
            Name = Pokemon.Name,
            Height = Pokemon.Height,
            Weight = Pokemon.Weight,
            BaseExperience = Pokemon.BaseExperience
        };
        await httpClient.PostAsJsonAsync<PokemonCreate>("/api/Pokemon", pokemonDTO);
    }

    protected async Task ChangePokemonAsync(int i)
    {
        Pokemon = await GetPokemon((Pokemon.Id += i).ToString());
    }

    public async Task<PokeApiPokemonDetail> GetPokemon(string name)
        {
            var result = JsonConvert.DeserializeObject<PokeApiPokemonDetail>(await httpClient.GetStringAsync($"https://pokeapi.co/api/v2/pokemon/{name}"));
            if (result.Name.Length == 0)
            {
                return null;
            }

            return result;
        }
}